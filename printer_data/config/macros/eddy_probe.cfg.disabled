[gcode_macro CALIBRATE_EDDY]
description: Execute Eddy Current Sensor Calibration and Subsequent Leveling Process
gcode:
    # ========== Start Calibrating Eddy Current Sensor ==========
    M117 Starting Eddy Current Sensor Calibration...
    # Safety Check: Verify if the printer is in pause state
    {% if printer.pause_resume.is_paused|lower == 'true' %}
        {action_raise_error("Please resume printing before calibration")}
    {% endif %}
    G28 X Y
    G0 X{printer.toolhead.axis_maximum.x / 2} Y{printer.toolhead.axis_maximum.y / 2} F6000
    SET_KINEMATIC_POSITION Z=0
    # Execute Calibration Process 
    LDC_CALIBRATE_DRIVE_CURRENT CHIP=fly_eddy_probe 
    # Attempt to output DRIVE_CURRENT_FEEDBACK value
    M117 Eddy Current Calibration Complete, Feedback Value: {DRIVE_CURRENT_FEEDBACK}
    # Check if Feedback Value is within Normal Range
    {% if DRIVE_CURRENT_FEEDBACK is defined %}
        {% if DRIVE_CURRENT_FEEDBACK < 10 or DRIVE_CURRENT_FEEDBACK > 20 %}
            M117 Warning: Eddy Current Feedback Value Abnormal ({DRIVE_CURRENT_FEEDBACK}). Please check connections.
        {% else %}
            M117 Eddy Current Feedback Value Normal ({DRIVE_CURRENT_FEEDBACK}).
        {% endif %}
    {% else %}
        M117 Error: Unable to retrieve DRIVE_CURRENT_FEEDBACK value.
    {% endif %}
    
    G1 Z15 F300
    
    # Prompt user to perform manual Z Offset Calibration
    M117 Please perform manual Z Offset Calibration.
    SET_KINEMATIC_POSITION Z={printer.toolhead.axis_maximum.z-10}
    # Execute Eddy Effective Distance Calibration
    PROBE_EDDY_CURRENT_CALIBRATE CHIP=fly_eddy_probe 
    # Indicate Calibration Completion
    M117 All Calibration Processes Completed!

[gcode_macro TEMP_COMPENSATION]
description: Temperature Compensation Calibration Process
gcode:
  {% set bed_temp = params.BED_TEMP|default(90)|int %}
  {% set nozzle_temp = params.NOZZLE_TEMP|default(250)|int %}
  {% set temperature_range_value = params.TEMPERATURE_RANGE_VALUE|default(3)|int %}
  {% set desired_temperature = params.DESIRED_TEMPERATURE|default(80)|int %}
  {% set Temperature_Timeout_Duration = params.TEMPERATURE_TIMEOUT_DURATION|default(6500000000)|int %}
    # Safety check: Ensure all axes are unlocked
    {% if printer.pause_resume.is_paused %}
        { action_raise_error("Error: Printer is paused. Please resume first.") }
    {% endif %}
    # Step 1: Home all axes
    STATUS_MESSAGE="Homing all axes..."
    G28
    STATUS_MESSAGE="Homing completed"
    # Step 2: Auto-leveling
    # Step 3: Safely raise the Z-axis
    STATUS_MESSAGE="Raising Z-axis..."
    G90
    G0 Z5 F2000  # Raise slowly to prevent collisions
    # Step 4: Set timeout and temperature calibration
    SET_IDLE_TIMEOUT TIMEOUT={Temperature_Timeout_Duration}
    STATUS_MESSAGE="Starting temperature probe calibration..."
    TEMPERATURE_PROBE_CALIBRATE PROBE=fly_eddy_probe TARGET={desired_temperature} STEP={temperature_range_value}
    # Step 5: Set printing temperatures (modify as needed)
    STATUS_MESSAGE="Setting working temperatures..."
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={nozzle_temp}
    # Completion message
    STATUS_MESSAGE="Temperature compensation process completed!"
    description: G-Code macro

[gcode_macro CANCEL_TEMP_COMPENSATION]
description: Abort Temperature Compensation Process
gcode:
    SET_IDLE_TIMEOUT TIMEOUT=600  # Restore default timeout
    TURN_OFF_HEATERS
    M117 Calibration Aborted

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode: 
    G1 X90 Y90 Z20
    _BED_MESH_CALIBRATE horizontal_move_z=2 METHOD=rapid_scan ADAPTIVE=1 {rawparams}
    #G28 X Y
    G1 X90 Y90 Z20

[gcode_macro CALIBRATE_DD]
description: Mobile axis macro
gcode:
    # Reset X/Y Axis 
    G28 X Y 
    # Move the print head to the center of the heated bed (compatible with most CoreXY models)
    G0 X{printer.toolhead.axis_maximum.x / 2} Y{printer.toolhead.axis_maximum.y / 2} F6000 
    SET_KINEMATIC_POSITION Z={printer.toolhead.axis_maximum.z-10}

[gcode_macro G28]
rename_existing: G28.1
gcode:
    {% if not rawparams or ('Y' in rawparams and 'X' in rawparams) %}
      SEND_MESSAGE TYPE=INFO MSG="Homing Y"
      G28.1 Y
      SEND_MESSAGE TYPE=INFO MSG="Homing X"
      G28.1 X
    {% elif 'Y' in rawparams %}
      SEND_MESSAGE TYPE=INFO MSG="Homing Y"
      G28.1 Y
    {% elif 'X' in rawparams %}
      SEND_MESSAGE TYPE=INFO MSG="Homing X"
      G28.1 X
    {% endif %}
    {% if not rawparams or (rawparams and 'Z' in rawparams) %}
      SEND_MESSAGE TYPE=INFO MSG="Centering X and Y"
      G1 X90 Y90
      SEND_MESSAGE TYPE=INFO MSG="Homing Z"
      G28.1 Z
      G1 Z10
      SEND_MESSAGE TYPE=INFO MSG="Probing and setting Z"
      PROBE
      SET_Z_FROM_PROBE
      SEND_MESSAGE TYPE=INFO MSG="Homing End"
      G1 Z20
    {% endif %}

[gcode_macro SET_Z_FROM_PROBE]
gcode:
    {% set cf = printer.configfile.settings %}
    SET_GCODE_OFFSET_ORIG Z={printer.probe.last_z_result - cf['probe_eddy_current fly_eddy_probe'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset}
    G90
    G1 Z{cf.safe_z_home.z_hop}

[gcode_macro Z_OFFSET_APPLY_PROBE]
rename_existing: Z_OFFSET_APPLY_PROBE_ORIG
gcode:
  SAVE_VARIABLE VARIABLE=nvm_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset }

[gcode_macro SET_GCODE_OFFSET]
rename_existing: SET_GCODE_OFFSET_ORIG
variable_restored: False  # Mark whether the var has been restored from NVM
variable_runtime_offset: 0
gcode:
  {% if params.Z_ADJUST %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset + params.Z_ADJUST|float }
  {% endif %}
  {% if params.Z %} 
    {% set paramList = rawparams.split() %}
    {% for i in range(paramList|length) %}
      {% if paramList[i]=="Z=0" %}
        {% set temp=paramList.pop(i) %}
        {% set temp="Z_ADJUST=" + (-printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset)|string %}
        {% if paramList.append(temp) %}{% endif %}
      {% endif %}
    {% endfor %}
    {% set rawparams=paramList|join(' ') %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE=0
  {% endif %}
  SET_GCODE_OFFSET_ORIG { rawparams }
